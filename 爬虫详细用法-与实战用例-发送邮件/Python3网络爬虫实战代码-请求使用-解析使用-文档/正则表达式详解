

#导入正则表达库
import re



正则表达式常见匹配模式
----------------------------------
\w   匹配字母数字及下划线
\W   匹配非字母数字下划线

\s   匹配任意空白字符，等价与[\t\n\r\f]
\S   匹配任意非空字符

\d   匹配任意数字，等价与[0-9]
\D   匹配任意非数字

\A   匹配字符串开始
\Z   匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串

\G   匹配最后匹配完成的位置
\n   匹配一个换行符

\t   匹配一个制表符

^    匹配字符串的开头
$    匹配字符串的末尾
.    匹配任意字符，除了换行，当re.DOTALL标记被指定时，则可以匹配包括换行的任意字符

[..]    用来表示一组字符，单独列出：[amk]'a','m'或者'k'
[^.]    不存在[]中的字符[^abc]匹配除了a,b,c之外的字符

*    匹配0个或者多个的表达式
+    匹配1个或多个表达式
?    匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式  (表示我前一个字符有没有，有我就匹配，没有我就不匹配)

{n}     精确匹配n个前面的表达式
{n,m}   匹配n到m次由前面的正则表达式定义的片段，贪婪方式

a|b     匹配a或b
()      匹配包括括号内的表达式，也表示一个组
--------------------------------------------------------



re.match(patterm,string,flage=0)
第一个：patterm 是自己写的正则表达式
第二个：string 是目标字符串
第三个: flage 匹配模式

re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，mathch()就返回none
--------------------------------------------------------

#最常规的匹配
content = 'Hello 123 456 world_This is a Reagex Demo'
result = re.match("^Hello\s\d\d\d\s\d{4}\s\w{10}.*Demo",content)
print(result)

#group返回匹配结果
print(result.group())

#span()输出匹配结果的范围
print(result.span())


#范匹配
content = 'Hello 123 4567 World_This is a Reagex Demo'
result = re.match('^Hello.*Demo$')
print(result)


#匹配目标
content = 'Hello 1234567 World_This is a Reagex Demo'
result = re.match('^Hello\s(\d+)\sWorld.*Demo')
print(result)


#贪婪匹配
content = 'Hello 1234567 World_This is a Reagex Demo'
result = re.match('^Hello*(\d+).*Demo')
print(result)


#非贪婪匹配
content = 'Hello 1234567 World_This is a Reagex Demo'
result = re.match('^Hello*?(\d+).*Demo')
print(result)



#匹配模式
content = 'Hello 1234567 World_This
is a Reagex Demo'
result = re.match('^Hello.*?(\d+).*?Demo',content,re.S)
print(result)


#转义
content = 'price is $5.00'
result = re.match('price is \$5\.00',content)
print(result)

总结：尽量使用泛型匹配，使用括号得到匹配目标，尽量使用非贪婪模式，有换行符就用re.S
-------------------------------------------------------------------------



re.search
research 扫描字符串并返回第一个成功的匹配
---------------------------------------------
content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
result = re.match('Hello.*?(\d+).*Demo',content)

content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
result = re.search('Hello.*?(\d+).*Demo',content)

总结：为匹配方便，能用search就不用match
-----------------------------------------------



匹配练习：
--------------------------------------------

#是查询一个结果
re.search()

html = '<div id="songs-list">' \
           '<h2 class="title">经典老歌</h2>' \
           '<p class="introduction">经典老歌列表</p>' \
           '<ul id="list" class="list-group">' \
                '<li data-view="2">一路有你</li>' \
                '<li data-view="7">' \
                    '<a href="/2.mp3" singer="任贤齐">沧海一声笑</a>' \
                '</li>' \
                '<li data-view="4" class="active"><a href="/3.mp3" singer="齐秦">往事随风</a></li>' \
                '<li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>' \
                '<li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>' \
                '<li data-view="5"><a href="/6.mp3" singer="邓丽君">但愿人长久</a></li>' \
           '</ul>' \
       '</div>'

#re.S 表示匹配换行符
result = re.search('<li.*?singer="(.*?)">(.*?)</a>',html,re.S)
print(result.group(1),result.group(2))

-----------------------------------------------------------------------------



re.findall()是查询所有能够匹配的结构
re.findall
搜索字符串，以列表形式返回全部能匹配的字符串
---------------------------------------


#因为findall是查询所有，所以不需要group

html = '<div id="songs-list">' \
           '<h2 class="title">经典老歌</h2>' \
           '<p class="introduction">经典老歌列表</p>' \
           '<ul id="list" class="list-group">' \
                '<li data-view="2">一路有你</li>' \
                '<li data-view="7">' \
                    '<a href="/2.mp3" singer="任贤齐">沧海一声笑</a>' \
                '</li>' \
                '<li data-view="4" class="active"><a href="/3.mp3" singer="齐秦">往事随风</a></li>' \
                '<li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>' \
                '<li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>' \
                '<li data-view="5"><a href="/6.mp3" singer="邓丽君">但愿人长久</a></li>' \
           '</ul>' \
       '</div>'

result = re.findall('<li.*?singer="(.*?)">(.*?)</a>',html)
print(result)




html = '<div id="songs-list">' \
           '<h2 class="title">经典老歌</h2>' \
           '<p class="introduction">经典老歌列表</p>' \
           '<ul id="list" class="list-group">' \
                '<li data-view="2">一路有你</li>' \
                '<li data-view="7">' \
                    '<a href="/2.mp3" singer="任贤齐">沧海一声笑</a>' \
                '</li>' \
                '<li data-view="4" class="active"><a href="/3.mp3" singer="齐秦">往事随风</a></li>' \
                '<li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>' \
                '<li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>' \
                '<li data-view="5"><a href="/6.mp3" singer="邓丽君">但愿人长久</a></li>' \
           '</ul>' \
       '</div>'

result = re.findall('<li.*?>\s*?(<a.*?>)?(\w+)?\s*?</li>',html,re.S)
print(result)
for s in result:
    print(type(s))


--------------------------------------------------------------------------------------------------

re.sub
替换字符串中每一个匹配的子串后返回替换后的字符串

content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
content = re.sub('\d+',",content)

content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
content = re.sub('\d+',Replacement,content)

----------------------------------------------------------------------------


re.compile
将一个正则表达式串编译成正则对象，以便于复用改匹配模式
--------------------------------------------------------------------
content = 'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'
partt  = re.compile('Hello.*Demo$',re.S)
result = re.match(partt,content)
print(result)

实战：
import re
import requests
content = requests.get('https://book.douban.com')

#实战
content = requests.get('https://book.douban.com/').text
patterm = re.compile('<li.*?cover.*?href="(.*?)".*?title="(.*?)".*?more-ta.*?author">(.*?)</span>.*?year">(.*?)</span>.*?</li>',re.S)
result  = re.findall(patterm,content)
for results in result:
    url,name,author,date = results
    print(url,name,author,date)








